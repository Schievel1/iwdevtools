#!/usr/bin/env bash
. "${0%/*}"/../lib/common.bashlib || exit 1 #C#
init
depend cat file mktemp readlink rm stat
usage <<-EOU
	Usage: ${0##*/} [option]... [patch]...

	Strip patches of typically useless cruft such as "diff --git"
	lines and timestamps to reduce size and improve readability.

	Patches can be passed either as arguments or through stdin,
	and either modified in-place (i.e. sed(1)'s -i) or to stdout.

	Options:
	  -q, --quiet        Don't nag about possible QA issues
	  -n, --dry-run      Don't scrub and only nag about QA instead

	  -s, --no-sanity    Disable \`file\` check for if being misdetected

	  -i, --in-place     Force using sed -i (no autodetect)
	  -o, --stdout       Always output to stdout (no autodetect)

	  -c, --no-color     Disable use of colors

	      --confdir=PATH Configuration dir to use instead of defaults
	                     (@confdir@ + ${XDG_CONFIG_HOME:-~/.config}/@package@)
	      --dumpconfig   Display config and exit (> ${0##*/}.conf)

	  -h, --help         Display usage information and exit
	      --version      Display version information and exit
EOU
optauto args "${@}" <<-EOO
	q|quiet=bool:false
	n|dry-run=bool:false
	s|!sanity=bool:true
	i|in-place=bool:false
	o|stdout=bool:false
	c|!color=bool:true
EOO
set -- "${args[@]}"; unset args

${O[in-place]} && ${O[stdout]} && die "can't in-place and stdout at same time"

# do basic sanity checks on supplied files, safety if going to use in-place
patches=()
while (( ${#} )); do
	[[ -f ${1} ]] || die "'${1}' is not a valid file"
	if ${O[sanity]} && [[ $(file -bL -- "${1}") != 'unified diff output'* ]]; then
		die "'${1}' does not appear to be a unified format patch"
	fi
	patches+=("${1}")
	shift
done

# devmanual's sed has a -i by default, try to preserve this behavior but
# will drop if input or output is detected to be stdin/stdout
if ${O[in-place]}; then
	stdout=
	stdin=
	inplace=(-i)
else
	# maybe in-place, stdout, or force-stdout
	stdin=$(readlink -m /proc/$$/fd/0) || die "readlink failed for stdin"
	[[ -f ${stdin} || ${stdin##*/} == pipe:* ]] || stdin=
	stdout=$(readlink -m /proc/$$/fd/1) || die "readlink failed for stdout"
	[[ -f ${stdout} || ${stdout##*/} == pipe:* ]] || stdout=
	inplace=(-i)
	[[ ${stdin} || ${stdout} ]] || ${O[stdout]} && inplace=()
fi

# copy stdin to a temporary file, simplifies inspection and sed usage
if [[ ${stdin} ]]; then
	TMPIN=
	trap '[[ -e ${TMPIN} ]] && rm "${TMPIN}"' EXIT
	TMPIN=$(mktemp "/tmp/.${0##*/}-XXXXXXXX") || die "mktemp failed"
	cat > "${TMPIN}" || die "writing to ${TMPIN} failed"
	exec <&-

	patches+=("${TMPIN}")
fi

(( ${#patches[@]} )) || die "no patches given"
(( ${#patches[@]} > 1 && ! ${#inplace[@]} )) \
	&& die "no support for multiple files when using stdin/stdout"

# save patch sizes for report
declare -i i=0
declare -ia oldsizes=() newsizes=()
for ((i=0; i < ${#patches[@]}; i++)); do
	oldsizes+=("$(stat -c %s "${patches[i]}")") || die "stat failed for '${patches[i]}'"
done

if ! ${O[dry-run]}; then
	# Taken from vapier's clean patches howto (also in Gentoo's devmanual)
	#  - https://dev.gentoo.org/~vapier/clean-patches
	#  - https://devmanual.gentoo.org/ebuild-writing/misc-files/patches/index.html
	#
	# additions:
	#  - discard after '---' in header (git noise, e.g. N files changed, N deletion)
	#  - discard git version and empty lines '-- ' signature
	# modifications:
	#  - add space after ---/+++ and diff for extra safety
	#   (patches patching patches sometimes have ---- ++++)
	sed -e '/^index /d' \
		-e '/^new file mode /d' \
		-e '/^Index:/d' \
		-e '/^=========/d' \
		-e '/^RCS file:/d' \
		-e '/^retrieving/d' \
		-e '/^diff /d' \
		-e '/^Files .* differ$/d' \
		-e '/^Only in /d' \
		-e '/^Common subdirectories/d' \
		-e '/^deleted file mode [0-9]*$/d' \
		-e '/^+++ /s:\t.*::' \
		-e '/^--- /s:\t.*::' \
		-e '/^---$/,/^--- /{/^--- /!d}' \
		-e '/^-- $/,+3{/^-- $/d;/^[0-9]\.[0-9]/d;/^$/d}' \
		"${inplace[@]}" -- "${patches[@]}" || die "scrubbed too hard"
fi

exec >&2 # done with stdout which may be a file

if ${O[dry-run]}; then
	newsizes=("${oldsizes[@]}")
	echo "Would scrub (dry-run):"
	if [[ ${stdin} ]]; then
		echo " - ${stdin}"
	else
		printf " - %s\n" "${patches[@]}"
	fi
else
	# get new sizes and give a report at same time (newsizes re-used for QA later)
	percent() {
		(( ${1} && ${2} )) && echo $((10**4 - 10**4 * ${2} / ${1})) || echo NaN
	}
	echo "Successfully scrubbed:"
	if (( ${#inplace[@]} )); then
		for ((i=0; i < ${#patches[@]}; i++)); do
			newsizes[i]=$(stat -c %s "${patches[i]}") || die "stat failed for '${patches[i]}'"
			printf -- " - %s (%.2f%% reduction)\n" "${patches[i]}" "$(percent "${oldsizes[i]}" "${newsizes[i]}")e-2"
		done
	else
		if [[ -f ${stdout} ]]; then
			newsizes[0]=$(stat -c %s "${stdout}") || die "stat failed for '${stdout}'"
			printf -- " - %s (%.2f%% reduction)\n" "${stdin:-${patches[0]}}" "$(percent "${oldsizes[0]}" "${newsizes[0]}")e-2"
		else
			newsizes[0]=${oldsizes[0]}
			echo " - ${stdin:-${patches[0]}}"
		fi
	fi
	echo "Please verify that header(s) have not lost anything meaningful."
fi

${O[quiet]} && end # nothing else to do

inspect() {
	qa() {
		local c
		if [[ ${3} == -* ]]; then
			c=${C[r]}
		elif [[ ${3} == +* ]]; then
			c=${C[g]}
		else
			c=${C[a]}
		fi
		printf "\n${C[y]}%03d: ${c}%s\n${C[a]}^^^${C[n]} %s\n" "${2}" "${3}" "${1}"
	}
	qanl() {
		printf "\n${C[y]}>>>${C[n]} %s\n" "${1}"
	}

	local -i j=0 removed=0
	local crlf=false
	local header=true
	local header_http=false
	local header_text=false

	local l
	while IFS= read -r l; do
		j+=1

		[[ ${l} == ---\ * ]] && header=false

		if ${header}; then
			case ${l} in
				*[a-zA-Z]*) header_text=true;;&
				*http:*|*https:*) header_http=true;;
			esac
			if [[ ${l} =~ ^From\ [a-z0-9]*\ .*\ ..:..:..\ .... ]]; then
				# if know the upstream it's easy to find but it's inconvenient
				qa "suggest replacing line with a http link pointing the upstream commit hash" ${j} "${l}"
			fi
		else
			case ${l} in
				---\ *)
					if [[ ${l} == ---\ /dev/null* ]]; then
						file_a=
					else
						file_a=${l%%$'\t'*}
						file_a=${file_a#--- }
						if [[ ${file_a} != a/* ]]; then
							qa "does not start with a/ (-p1 and short git-style names)" ${j} "${l}"
						fi
						file_a=${file_a##*/}
					fi
				;;
				+++\ *)
					if [[ ${l} == +++\ /dev/null* ]]; then
						qa "is patch removing files? (how about using rm in the ebuild instead?)" ${j} "${l}"
					else
						file_b=${l%%$'\t'*}
						file_b=${file_b#+++ }
						if [[ ${file_b} != b/* ]]; then
							qa "does not start with b/ (-p1 and short git-style names)" ${j} "${l}"
						fi
						file_b=${file_b##*/}

						if [[ ${file_b} == configure ]]; then
							qa "if this 'configure' is autotools-generated, it's preferable to patch"$'\n'"    configure.ac and use eautoreconf instead" ${j} "${l}"
						fi

						if [[ ${file_a} && ${file_a} != "${file_b}" ]]; then
							qa "filename is different from previous line, is this a git-style rename?"$'\n'"   (renaming needs recent patch(1) and won't work with stripped 'diff --git',"$'\n'"    preferable to not rely on this if patch is intended for portage)" ${j} "${l}"
						fi
					fi
				;;
				# this one is hard to add given need to consider #include, #ifdef, etc..
#				+\#*\|+//*) # keep to minimum, characters could mean many things
#					qa "is patch inserting comments? (preferably useless lines should be removed"$'\n'"    and explanations go in patch header, unless it's meant to be upstreamed)" ${j} "${l}"
#				;;
				+*pkg-config*)
					# check for variable too in case of Makefile "PKG_CONFIG ?= pkg-config"
					if [[ ${l} != *PKG_CONFIG* ]]; then
						qa "should use PKG_CONFIG variable over a flat pkg-config call" ${j} "${l}"
					fi
				;;&
				+*/usr*|+*/etc*|+*/var*)
					qa "seeing a potentially top-level path, is it respecting \${EPREFIX}?" ${j} "${l}"
				;;&
				+*/lib64*|+*/lib32*|+*/lib/*) # keep extra / given lib* matches too much
					qa "seem like a library dir, is it respecting \$(get_libdir)?" ${j} "${l}"
				;;&
				*$'\r') crlf=true;;
			esac

			if [[ ${l} == -* ]]; then
				if (( removed++ == 21 )); then
					qa "over 20 lines are being removed, any chance to simplify? e.g. with 'if false'"$'\n'"   (disregard if meant to be upstreamed, go in SRC_URI, or would cause issues)" ${j} "${l}"
				fi
			else
				removed=0
			fi
		fi
	done < "${1}" || die "failed reading '${1}'"

	# checked by other tools, but check the 20kiB limit as a forewarning
	if (( ${2} >= 20480 )); then
		qanl "size greater than 20kiB, reminder that large patches should use SRC_URI"$'\n'"   (or be preferably upstreamed)"
	fi

	# hard to tell if it's a good header or not, but check for lack of effort
	${header_text} || qanl "empty header, usually good to have (at least) some short description"
	${header_http} || qanl "no links in header, verify if relevant bug links or upstream refs to add"

	${crlf} && qanl "note that the patch seems to have some \\r\\n line terminators, use care"$'\n'"    so they aren't accidentally lost"
}

for ((i=0; i < ${#patches[@]}; i++)); do
	qa=$(inspect "${patches[i]}" "${newsizes[i]}")

	if [[ ${qa} ]]; then
		# only ever 1 patch if stdin, display non-tmpfile name
		if [[ ${stdin} ]]; then
			if [[ -f ${stdout} ]]; then
				patch=${stdout}
			else
				patch=${stdin}
			fi
		else
			patch=${patches[i]}
		fi
		echo
		echo "QA: ${patch} has generated warnings:"
		echo "${qa}"
	fi
done

if [[ ${qa} ]]; then
	echo
	echo "If patch is intended for the ::gentoo tree, would be good to review."
	echo "Note that these checks are tentative and cannot consider everything."
	echo "https://devmanual.gentoo.org/ebuild-writing/misc-files/patches/index.html"
fi

# vim: ts=4
